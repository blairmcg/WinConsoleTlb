	typedef struct _COORD {
		SHORT X;
		SHORT Y;
	} COORD, *PCOORD;

	typedef struct _SMALL_RECT {
		SHORT Left;
		SHORT Top;
		SHORT Right;
		SHORT Bottom;
	} SMALL_RECT, *PSMALL_RECT;

	typedef struct _KEY_EVENT_RECORD {
		BOOL bKeyDown;
		WORD wRepeatCount;
		WORD wVirtualKeyCode;
		WORD wVirtualScanCode;
		union {
			WCHAR UnicodeChar;
			CHAR   AsciiChar;
		} uChar;
		DWORD dwControlKeyState;
	} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;

	//
	// ControlKeyState flags
	//

#define RIGHT_ALT_PRESSED     0x0001 // the right alt key is pressed.
#define LEFT_ALT_PRESSED      0x0002 // the left alt key is pressed.
#define RIGHT_CTRL_PRESSED    0x0004 // the right ctrl key is pressed.
#define LEFT_CTRL_PRESSED     0x0008 // the left ctrl key is pressed.
#define SHIFT_PRESSED         0x0010 // the shift key is pressed.
#define NUMLOCK_ON            0x0020 // the numlock light is on.
#define SCROLLLOCK_ON         0x0040 // the scrolllock light is on.
#define CAPSLOCK_ON           0x0080 // the capslock light is on.
#define ENHANCED_KEY          0x0100 // the key is enhanced.
#define NLS_DBCSCHAR          0x00010000 // DBCS for JPN: SBCS/DBCS mode.
#define NLS_ALPHANUMERIC      0x00000000 // DBCS for JPN: Alphanumeric mode.
#define NLS_KATAKANA          0x00020000 // DBCS for JPN: Katakana mode.
#define NLS_HIRAGANA          0x00040000 // DBCS for JPN: Hiragana mode.
#define NLS_ROMAN             0x00400000 // DBCS for JPN: Roman/Noroman mode.
#define NLS_IME_CONVERSION    0x00800000 // DBCS for JPN: IME conversion.
#define NLS_IME_DISABLE       0x20000000 // DBCS for JPN: IME enable/disable.

	typedef struct _MOUSE_EVENT_RECORD {
		COORD dwMousePosition;
		DWORD dwButtonState;
		DWORD dwControlKeyState;
		DWORD dwEventFlags;
	} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;

	//
	// ButtonState flags
	//

#define FROM_LEFT_1ST_BUTTON_PRESSED    0x0001
#define RIGHTMOST_BUTTON_PRESSED        0x0002
#define FROM_LEFT_2ND_BUTTON_PRESSED    0x0004
#define FROM_LEFT_3RD_BUTTON_PRESSED    0x0008
#define FROM_LEFT_4TH_BUTTON_PRESSED    0x0010

	//
	// EventFlags
	//

#define MOUSE_MOVED   0x0001
#define DOUBLE_CLICK  0x0002
#define MOUSE_WHEELED 0x0004
#if(_WIN32_WINNT >= 0x0600)
#define MOUSE_HWHEELED 0x0008
#endif /* _WIN32_WINNT >= 0x0600 */

	typedef struct _WINDOW_BUFFER_SIZE_RECORD {
		COORD dwSize;
	} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

	typedef struct _MENU_EVENT_RECORD {
		UINT dwCommandId;
	} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

	typedef struct _FOCUS_EVENT_RECORD {
		BOOL bSetFocus;
	} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

	typedef struct _INPUT_RECORD {
		WORD EventType;
		union {
			KEY_EVENT_RECORD KeyEvent;
			MOUSE_EVENT_RECORD MouseEvent;
			WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
			MENU_EVENT_RECORD MenuEvent;
			FOCUS_EVENT_RECORD FocusEvent;
		} Event;
	} INPUT_RECORD, *PINPUT_RECORD;


	//
	//  EventType flags:
	//

#define KEY_EVENT         0x0001 // Event contains key event record
#define MOUSE_EVENT       0x0002 // Event contains mouse event record
#define WINDOW_BUFFER_SIZE_EVENT 0x0004 // Event contains window change event record
#define MENU_EVENT 0x0008 // Event contains menu event record
#define FOCUS_EVENT 0x0010 // event contains focus change

	typedef struct _CHAR_INFO {
		union {
			WCHAR UnicodeChar;
			CHAR   AsciiChar;
		} Char;
		WORD Attributes;
	} CHAR_INFO, *PCHAR_INFO;


	//
	// Attributes flags:
	//

#define FOREGROUND_BLUE      0x0001 // text color contains blue.
#define FOREGROUND_GREEN     0x0002 // text color contains green.
#define FOREGROUND_RED       0x0004 // text color contains red.
#define FOREGROUND_INTENSITY 0x0008 // text color is intensified.
#define BACKGROUND_BLUE      0x0010 // background color contains blue.
#define BACKGROUND_GREEN     0x0020 // background color contains green.
#define BACKGROUND_RED       0x0040 // background color contains red.
#define BACKGROUND_INTENSITY 0x0080 // background color is intensified.
#define COMMON_LVB_LEADING_BYTE    0x0100 // Leading Byte of DBCS
#define COMMON_LVB_TRAILING_BYTE   0x0200 // Trailing Byte of DBCS
#define COMMON_LVB_GRID_HORIZONTAL 0x0400 // DBCS: Grid attribute: top horizontal.
#define COMMON_LVB_GRID_LVERTICAL  0x0800 // DBCS: Grid attribute: left vertical.
#define COMMON_LVB_GRID_RVERTICAL  0x1000 // DBCS: Grid attribute: right vertical.
#define COMMON_LVB_REVERSE_VIDEO   0x4000 // DBCS: Reverse fore/back ground attribute.
#define COMMON_LVB_UNDERSCORE      0x8000 // DBCS: Underscore.

#define COMMON_LVB_SBCSDBCS        0x0300 // SBCS or DBCS flag.

	typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
		COORD dwSize;
		COORD dwCursorPosition;
		WORD  wAttributes;
		SMALL_RECT srWindow;
		COORD dwMaximumWindowSize;
	} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

	typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
		ULONG cbSize;
		COORD dwSize;
		COORD dwCursorPosition;
		WORD wAttributes;
		SMALL_RECT srWindow;
		COORD dwMaximumWindowSize;
		WORD wPopupAttributes;
		BOOL bFullscreenSupported;
		COLORREF ColorTable[16];
	} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

	typedef struct _CONSOLE_CURSOR_INFO {
		DWORD  dwSize;
		BOOL   bVisible;
	} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

	typedef struct _CONSOLE_FONT_INFO {
		DWORD  nFont;
		COORD  dwFontSize;
	} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;

	typedef struct _CONSOLE_FONT_INFOEX {
		ULONG cbSize;
		DWORD nFont;
		COORD dwFontSize;
		UINT FontFamily;
		UINT FontWeight;
		WCHAR FaceName[/*LF_FACESIZE*/32];
	} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;

#define HISTORY_NO_DUP_FLAG 0x1

	typedef struct _CONSOLE_HISTORY_INFO {
		UINT cbSize;
		UINT HistoryBufferSize;
		UINT NumberOfHistoryBuffers;
		DWORD dwFlags;
	} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

	typedef struct _CONSOLE_SELECTION_INFO {
		DWORD dwFlags;
		COORD dwSelectionAnchor;
		SMALL_RECT srSelection;
	} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;

	//
	// Selection flags
	//

#define CONSOLE_NO_SELECTION            0x0000
#define CONSOLE_SELECTION_IN_PROGRESS   0x0001   // selection has begun
#define CONSOLE_SELECTION_NOT_EMPTY     0x0002   // non-null select rectangle
#define CONSOLE_MOUSE_SELECTION         0x0004   // selecting with mouse
#define CONSOLE_MOUSE_DOWN              0x0008   // mouse is down

	//
	// typedef for ctrl-c handler routines
	//

	typedef
		BOOL
		(WINAPI *PHANDLER_ROUTINE)(
			_In_ DWORD CtrlType
			);


#define CTRL_C_EVENT        0
#define CTRL_BREAK_EVENT    1
#define CTRL_CLOSE_EVENT    2
	// 3 is reserved!
	// 4 is reserved!
#define CTRL_LOGOFF_EVENT   5
#define CTRL_SHUTDOWN_EVENT 6

	//
	//  Input Mode flags:
	//

#define ENABLE_PROCESSED_INPUT              0x0001
#define ENABLE_LINE_INPUT                   0x0002
#define ENABLE_ECHO_INPUT                   0x0004
#define ENABLE_WINDOW_INPUT                 0x0008
#define ENABLE_MOUSE_INPUT                  0x0010
#define ENABLE_INSERT_MODE                  0x0020
#define ENABLE_QUICK_EDIT_MODE              0x0040
#define ENABLE_EXTENDED_FLAGS               0x0080
#define ENABLE_AUTO_POSITION                0x0100
#define ENABLE_VIRTUAL_TERMINAL_INPUT       0x0200

	//
	// Output Mode flags:
	//

#define ENABLE_PROCESSED_OUTPUT             0x0001
#define ENABLE_WRAP_AT_EOL_OUTPUT           0x0002
#define ENABLE_VIRTUAL_TERMINAL_PROCESSING  0x0004
#define DISABLE_NEWLINE_AUTO_RETURN         0x0008
#define ENABLE_LVB_GRID_WORLDWIDE           0x0010


[
#ifdef UNICODE
uuid(E55AC741-0BD6-4346-B5BA-98E93D9694C7),
#else
uuid(64674048-3a82-101b-8181-00aa003743d3),
#endif
helpstring("Console API Functions"),
dllname("KERNEL32.DLL")
]
module Kernel 
{
	//
	// direct API definitions.
	//

#ifdef UNICODE
	[entry("WriteConsoleInputW")]
	WINBASEAPI
	BOOL
	WINAPI
	WriteConsoleInput(
		_In_ HANDLE hConsoleInput,
		_In_reads_(nLength) CONST INPUT_RECORD *lpBuffer,
		_In_ DWORD nLength,
		_Out_ LPDWORD lpNumberOfEventsWritten
	);
#else
	[entry("WriteConsoleInputA")]
	WINBASEAPI
	BOOL
	WINAPI
	WriteConsoleInput(
		_In_ HANDLE hConsoleInput,
		_In_reads_(nLength) CONST INPUT_RECORD *lpBuffer,
		_In_ DWORD nLength,
		_Out_ LPDWORD lpNumberOfEventsWritten
	);
#endif

//BOOL
//WINAPI
//ReadConsoleOutputA(
//	_In_ HANDLE hConsoleOutput,
//	_Out_writes_(dwBufferSize.X * dwBufferSize.Y) PCHAR_INFO lpBuffer,
//	_In_ COORD dwBufferSize,
//	_In_ COORD dwBufferCoord,
//	_Inout_ PSMALL_RECT lpReadRegion
//);
//BOOL
//WINAPI
//ReadConsoleOutputW(
//	_In_ HANDLE hConsoleOutput,
//	_Out_writes_(dwBufferSize.X * dwBufferSize.Y) PCHAR_INFO lpBuffer,
//	_In_ COORD dwBufferSize,
//	_In_ COORD dwBufferCoord,
//	_Inout_ PSMALL_RECT lpReadRegion
//);
//#ifdef UNICODE
//#define ReadConsoleOutput  ReadConsoleOutputW
//#else
//#define ReadConsoleOutput  ReadConsoleOutputA
//#endif // !UNICODE
//
//BOOL
//WINAPI
//WriteConsoleOutputA(
//	_In_ HANDLE hConsoleOutput,
//	_In_reads_(dwBufferSize.X * dwBufferSize.Y) CONST CHAR_INFO *lpBuffer,
//	_In_ COORD dwBufferSize,
//	_In_ COORD dwBufferCoord,
//	_Inout_ PSMALL_RECT lpWriteRegion
//);
//BOOL
//WINAPI
//WriteConsoleOutputW(
//	_In_ HANDLE hConsoleOutput,
//	_In_reads_(dwBufferSize.X * dwBufferSize.Y) CONST CHAR_INFO *lpBuffer,
//	_In_ COORD dwBufferSize,
//	_In_ COORD dwBufferCoord,
//	_Inout_ PSMALL_RECT lpWriteRegion
//);
//#ifdef UNICODE
//#define WriteConsoleOutput  WriteConsoleOutputW
//#else
//#define WriteConsoleOutput  WriteConsoleOutputA
//#endif // !UNICODE
//
//BOOL
//WINAPI
//ReadConsoleOutputCharacterA(
//	_In_ HANDLE hConsoleOutput,
//	_Out_writes_(nLength) LPSTR lpCharacter,
//	_In_ DWORD nLength,
//	_In_ COORD dwReadCoord,
//	_Out_ LPDWORD lpNumberOfCharsRead
//);
//BOOL
//WINAPI
//ReadConsoleOutputCharacterW(
//	_In_ HANDLE hConsoleOutput,
//	_Out_writes_(nLength) LPWSTR lpCharacter,
//	_In_ DWORD nLength,
//	_In_ COORD dwReadCoord,
//	_Out_ LPDWORD lpNumberOfCharsRead
//);
//#ifdef UNICODE
//#define ReadConsoleOutputCharacter  ReadConsoleOutputCharacterW
//#else
//#define ReadConsoleOutputCharacter  ReadConsoleOutputCharacterA
//#endif // !UNICODE
//
//BOOL
//WINAPI
//ReadConsoleOutputAttribute(
//	_In_ HANDLE hConsoleOutput,
//	_Out_writes_(nLength) LPWORD lpAttribute,
//	_In_ DWORD nLength,
//	_In_ COORD dwReadCoord,
//	_Out_ LPDWORD lpNumberOfAttrsRead
//);
//
//BOOL
//WINAPI
//WriteConsoleOutputCharacterA(
//	_In_ HANDLE hConsoleOutput,
//	_In_reads_(nLength) LPCSTR lpCharacter,
//	_In_ DWORD nLength,
//	_In_ COORD dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfCharsWritten
//);
//BOOL
//WINAPI
//WriteConsoleOutputCharacterW(
//	_In_ HANDLE hConsoleOutput,
//	_In_reads_(nLength) LPCWSTR lpCharacter,
//	_In_ DWORD nLength,
//	_In_ COORD dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfCharsWritten
//);
//#ifdef UNICODE
//#define WriteConsoleOutputCharacter  WriteConsoleOutputCharacterW
//#else
//#define WriteConsoleOutputCharacter  WriteConsoleOutputCharacterA
//#endif // !UNICODE
//
//BOOL
//WINAPI
//WriteConsoleOutputAttribute(
//	_In_ HANDLE hConsoleOutput,
//	_In_reads_(nLength) CONST WORD *lpAttribute,
//	_In_ DWORD nLength,
//	_In_ COORD dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfAttrsWritten
//);
//
//BOOL
//WINAPI
//FillConsoleOutputCharacterA(
//	_In_ HANDLE hConsoleOutput,
//	_In_ CHAR  cCharacter,
//	_In_ DWORD  nLength,
//	_In_ COORD  dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfCharsWritten
//);
//BOOL
//WINAPI
//FillConsoleOutputCharacterW(
//	_In_ HANDLE hConsoleOutput,
//	_In_ WCHAR  cCharacter,
//	_In_ DWORD  nLength,
//	_In_ COORD  dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfCharsWritten
//);
//#ifdef UNICODE
//#define FillConsoleOutputCharacter  FillConsoleOutputCharacterW
//#else
//#define FillConsoleOutputCharacter  FillConsoleOutputCharacterA
//#endif // !UNICODE
//
//BOOL
//WINAPI
//FillConsoleOutputAttribute(
//	_In_ HANDLE hConsoleOutput,
//	_In_ WORD   wAttribute,
//	_In_ DWORD  nLength,
//	_In_ COORD  dwWriteCoord,
//	_Out_ LPDWORD lpNumberOfAttrsWritten
//);
//
//#define CONSOLE_REAL_OUTPUT_HANDLE (LongToHandle(-2))
//#define CONSOLE_REAL_INPUT_HANDLE (LongToHandle(-3))
//
//BOOL
//WINAPI
//GetConsoleScreenBufferInfo(
//	_In_ HANDLE hConsoleOutput,
//	_Out_ PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
//);
//
//BOOL
//WINAPI
//GetConsoleScreenBufferInfoEx(
//	_In_ HANDLE hConsoleOutput,
//	_Inout_ PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
//
//BOOL
//WINAPI
//SetConsoleScreenBufferInfoEx(
//	_In_ HANDLE hConsoleOutput,
//	_In_ PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
//
//COORD
//WINAPI
//GetLargestConsoleWindowSize(
//	_In_ HANDLE hConsoleOutput
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetConsoleCursorInfo(
//	_In_ HANDLE hConsoleOutput,
//	_Out_ PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetCurrentConsoleFont(
//	_In_ HANDLE hConsoleOutput,
//	_In_ BOOL bMaximumWindow,
//	_Out_ PCONSOLE_FONT_INFO lpConsoleCurrentFont
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetCurrentConsoleFontEx(
//	_In_ HANDLE hConsoleOutput,
//	_In_ BOOL bMaximumWindow,
//	_Out_ PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetCurrentConsoleFontEx(
//	_In_ HANDLE hConsoleOutput,
//	_In_ BOOL bMaximumWindow,
//	_In_ PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetConsoleHistoryInfo(
//	_Out_ PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleHistoryInfo(
//	_In_ PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
//
//WINBASEAPI
//COORD
//WINAPI
//GetConsoleFontSize(
//	_In_ HANDLE hConsoleOutput,
//	_In_ DWORD nFont
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetConsoleSelectionInfo(
//	_Out_ PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//GetNumberOfConsoleMouseButtons(
//	_Out_ LPDWORD lpNumberOfMouseButtons
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleActiveScreenBuffer(
//	_In_ HANDLE hConsoleOutput
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//FlushConsoleInputBuffer(
//	_In_ HANDLE hConsoleInput
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleScreenBufferSize(
//	_In_ HANDLE hConsoleOutput,
//	_In_ COORD dwSize
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleCursorPosition(
//	_In_ HANDLE hConsoleOutput,
//	_In_ COORD dwCursorPosition
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleCursorInfo(
//	_In_ HANDLE hConsoleOutput,
//	_In_ CONST CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//ScrollConsoleScreenBufferA(
//	_In_ HANDLE hConsoleOutput,
//	_In_ CONST SMALL_RECT *lpScrollRectangle,
//	_In_opt_ CONST SMALL_RECT *lpClipRectangle,
//	_In_ COORD dwDestinationOrigin,
//	_In_ CONST CHAR_INFO *lpFill
//);
//WINBASEAPI
//BOOL
//WINAPI
//ScrollConsoleScreenBufferW(
//	_In_ HANDLE hConsoleOutput,
//	_In_ CONST SMALL_RECT *lpScrollRectangle,
//	_In_opt_ CONST SMALL_RECT *lpClipRectangle,
//	_In_ COORD dwDestinationOrigin,
//	_In_ CONST CHAR_INFO *lpFill
//);
//#ifdef UNICODE
//#define ScrollConsoleScreenBuffer  ScrollConsoleScreenBufferW
//#else
//#define ScrollConsoleScreenBuffer  ScrollConsoleScreenBufferA
//#endif // !UNICODE
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleWindowInfo(
//	_In_ HANDLE hConsoleOutput,
//	_In_ BOOL bAbsolute,
//	_In_ CONST SMALL_RECT *lpConsoleWindow
//);
//
//WINBASEAPI
//BOOL
//WINAPI
//SetConsoleTextAttribute(
//	_In_ HANDLE hConsoleOutput,
//	_In_ WORD wAttributes
//);

[entry("GenerateConsoleCtrlEvent")]
WINBASEAPI
BOOL
WINAPI
GenerateConsoleCtrlEvent(
	_In_ DWORD dwCtrlEvent,
	_In_ DWORD dwProcessGroupId);

[
	usesgetlasterror,
	entry("FreeConsole"),
	helpstring("Detaches the calling process from its console.")
]
WINBASEAPI
BOOL
WINAPI
FreeConsole(
	VOID);

[
	usesgetlasterror,
	entry("AttachConsole"),
	helpstring("Attaches the calling process to the console of the specified process.")
]
WINBASEAPI
BOOL
WINAPI
AttachConsole(
	_In_ DWORD dwProcessId);

#define ATTACH_PARENT_PROCESS ((DWORD)-1)

#ifdef UNICODE
[
	entry("GetConsoleTitleW"),
	helpstring("Retrieves the title for the current console window.")
]
WINBASEAPI
DWORD
WINAPI
GetConsoleTitle(
	_Out_writes_(nSize) LPWSTR lpConsoleTitle,
	_In_ DWORD nSize
);
#else
[
	entry("GetConsoleTitleA"),
	helpstring("Retrieves the title for the current console window.")
]
WINBASEAPI
DWORD
WINAPI
GetConsoleTitle(
	_Out_writes_(nSize) LPSTR lpConsoleTitle,
	_In_ DWORD nSize
);
#endif

#ifdef UNICODE
[
	entry("GetConsoleOriginalTitleW"),
]
DWORD
WINAPI
GetConsoleOriginalTitleW(
	_Out_writes_(nSize) LPWSTR lpConsoleTitle,
	_In_ DWORD nSize);
#else
[
	entry("GetConsoleOriginalTitleA"),
]
DWORD
WINAPI
GetConsoleOriginalTitle(
	_Out_writes_(nSize) LPSTR lpConsoleTitle,
	_In_ DWORD nSize);
#endif

#ifdef UNICODE
[
	entry("SetConsoleTitleW"),
	helpstring("Sets the title for the current console window.")
]
BOOL
WINAPI
SetConsoleTitle(
	_In_ LPCWSTR lpConsoleTitle
);
#else
[
	entry("SetConsoleTitleA"),
	helpstring("Sets the title for the current console window.")
]
BOOL
WINAPI
SetConsoleTitle(
	_In_ LPCSTR lpConsoleTitle
);
#endif

#if 0
typedef struct _CONSOLE_READCONSOLE_CONTROL {
	ULONG nLength;
	ULONG nInitialChars;
	ULONG dwCtrlWakeupMask;
	ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

#define CONSOLE_TEXTMODE_BUFFER  1

WINBASEAPI
HANDLE
WINAPI
CreateConsoleScreenBuffer(
	_In_ DWORD dwDesiredAccess,
	_In_ DWORD dwShareMode,
	_In_opt_ CONST SECURITY_ATTRIBUTES *lpSecurityAttributes,
	_In_ DWORD dwFlags,
	_Reserved_ LPVOID lpScreenBufferData
);

WINBASEAPI
BOOL
WINAPI
SetConsoleCP(
	_In_ UINT wCodePageID
);

WINBASEAPI
BOOL
WINAPI
SetConsoleOutputCP(
	_In_ UINT wCodePageID
);

#define CONSOLE_FULLSCREEN 1            // fullscreen console
#define CONSOLE_FULLSCREEN_HARDWARE 2   // console owns the hardware
#endif

[
	entry("GetConsoleDisplayMode"),
	helpstring("Retrieves the display mode of the current console.")
]
WINBASEAPI
BOOL
APIENTRY
GetConsoleDisplayMode(
	_Out_ LPDWORD lpModeFlags);

#define CONSOLE_FULLSCREEN_MODE 1
#define CONSOLE_WINDOWED_MODE 2

[
	entry("SetConsoleDisplayMode"),
	helpstring("Sets the display mode of the specified console screen buffer.")
]
WINBASEAPI
BOOL
APIENTRY
SetConsoleDisplayMode(
	_In_ HANDLE hConsoleOutput,
	_In_ DWORD dwFlags,
	_Out_opt_ PCOORD lpNewScreenBufferDimensions);

[
	entry("GetConsoleWindow"),
	helpstring("Retrieves the window handle used by the console associated with the calling process.")
]
WINBASEAPI
HWND
APIENTRY
GetConsoleWindow(
	VOID
);

[
	entry("GetConsoleProcessList"),
	helpstring("Retrieves a list of the processes attached to the current console.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleProcessList(
	_Out_writes_(dwProcessCount) LPDWORD lpdwProcessList,
	_In_ DWORD dwProcessCount);

//
// Aliasing apis.
//
//
//WINBASEAPI
//BOOL
//APIENTRY
//AddConsoleAliasA(
//	_In_ LPSTR Source,
//	_In_ LPSTR Target,
//	_In_ LPSTR ExeName);
//WINBASEAPI
//BOOL
//APIENTRY
//AddConsoleAliasW(
//	_In_ LPWSTR Source,
//	_In_ LPWSTR Target,
//	_In_ LPWSTR ExeName);
//#ifdef UNICODE
//#define AddConsoleAlias  AddConsoleAliasW
//#else
//#define AddConsoleAlias  AddConsoleAliasA
//#endif // !UNICODE
//
//WINBASEAPI
//DWORD
//APIENTRY
//GetConsoleAliasA(
//	_In_ LPSTR Source,
//	_Out_writes_(TargetBufferLength) LPSTR TargetBuffer,
//	_In_ DWORD TargetBufferLength,
//	_In_ LPSTR ExeName);
//WINBASEAPI
//DWORD
//APIENTRY
//GetConsoleAliasW(
//	_In_ LPWSTR Source,
//	_Out_writes_(TargetBufferLength) LPWSTR TargetBuffer,
//	_In_ DWORD TargetBufferLength,
//	_In_ LPWSTR ExeName);
//#ifdef UNICODE
//#define GetConsoleAlias  GetConsoleAliasW
//#else
//#define GetConsoleAlias  GetConsoleAliasA
//#endif // !UNICODE
//
#ifdef UNICODE
[
	entry("GetConsoleAliasesLengthW"),
	helpstring("Retrieves the required size for the buffer used by the GetConsoleAliases function.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesLength(
	_In_ LPWSTR ExeName);
#else
[
	entry("GetConsoleAliasesLengthA"),
	helpstring("Retrieves the required size for the buffer used by the GetConsoleAliases function.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesLength(
	_In_ LPSTR ExeName);
#endif // !UNICODE

#ifdef UNICODE
[
	entry("GetConsoleAliasExesLengthW"),
	helpstring("Retrieves the required size for the buffer used by the GetConsoleAliasExes function.")
]
#define GetConsoleAliasExesLength  GetConsoleAliasExesLengthW
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesLength(
	VOID);
#else
[
	entry("GetConsoleAliasExesLengthA"),
	helpstring("Retrieves the required size for the buffer used by the GetConsoleAliasExes function.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExesLength(
	VOID); 
#endif // !UNICODE

#ifdef UNICODE
[
	entry("GetConsoleAliasesW"),
	helpstring("Retrieves all defined console aliases for the specified executable.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesW(
	_Out_writes_(AliasBufferLength) LPWSTR AliasBuffer,
	_In_ DWORD AliasBufferLength,
	_In_ LPWSTR ExeName);
#else
[
	entry("GetConsoleAliasesA"),
	helpstring("Retrieves all defined console aliases for the specified executable.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasesA(
	_Out_writes_(AliasBufferLength) LPSTR AliasBuffer,
	_In_ DWORD AliasBufferLength,
	_In_ LPSTR ExeName);
#endif // !UNICODE

#ifdef UNICODE
[
	entry("GetConsoleAliasExesW"),
	helpstring("Retrieves the names of all executable files with console aliases defined.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExes(
	_Out_writes_(ExeNameBufferLength) LPWSTR ExeNameBuffer,
	_In_ DWORD ExeNameBufferLength);
#else
[
	entry("GetConsoleAliasExesA"),
	helpstring("Retrieves the names of all executable files with console aliases defined.")
]
WINBASEAPI
DWORD
APIENTRY
GetConsoleAliasExes(
	_Out_writes_(ExeNameBufferLength) LPSTR ExeNameBuffer,
	_In_ DWORD ExeNameBufferLength);
#endif // !UNICODE

// Standard console api

[entry("AllocConsole"),
helpstring("Allocates a new console for the calling process.")]
WINBASEAPI
BOOL
WINAPI
AllocConsole(
	VOID
);

[entry("GetConsoleCP")]
WINBASEAPI
UINT
WINAPI
GetConsoleCP(
	VOID
);

[entry("GetConsoleMode")]
WINBASEAPI
BOOL
WINAPI
GetConsoleMode(
	_In_ HANDLE hConsoleHandle,
	_Out_ LPDWORD lpMode
);

[entry("GetConsoleOutputCP")]
WINBASEAPI
UINT
WINAPI
GetConsoleOutputCP(
	VOID
);

[entry("GetNumberOfConsoleInputEvents")]
WINBASEAPI
BOOL
WINAPI
GetNumberOfConsoleInputEvents(
	_In_ HANDLE hConsoleInput,
	_Out_ LPDWORD lpNumberOfEvents
);

#ifdef UNICODE
[
	entry("PeekConsoleInputW")
]
WINBASEAPI
BOOL
WINAPI
PeekConsoleInput(
	_In_ HANDLE hConsoleInput,
	_Out_writes_(nLength) PINPUT_RECORD lpBuffer,
	_In_ DWORD nLength,
	_Out_ LPDWORD lpNumberOfEventsRead
);
#else
[entry("PeekConsoleInputA")]
WINBASEAPI
BOOL
WINAPI
PeekConsoleInput(
	_In_ HANDLE hConsoleInput,
	_Out_writes_(nLength) PINPUT_RECORD lpBuffer,
	_In_ DWORD nLength,
	_Out_ LPDWORD lpNumberOfEventsRead
);
#endif

//WINBASEAPI
//_Success_(return != FALSE)
//BOOL
//WINAPI
//ReadConsoleA(
//    _In_ HANDLE hConsoleInput,
//    _Out_writes_bytes_to_(nNumberOfCharsToRead * sizeof(CHAR), *lpNumberOfCharsRead * sizeof(CHAR)) LPVOID lpBuffer,
//    _In_ DWORD nNumberOfCharsToRead,
//    _Out_ _Deref_out_range_(<=, nNumberOfCharsToRead) LPDWORD lpNumberOfCharsRead,
//    _In_opt_ PCONSOLE_READCONSOLE_CONTROL pInputControl
//    );

//WINBASEAPI
//_Success_(return != FALSE)
//BOOL
//WINAPI
//ReadConsoleW(
//    _In_ HANDLE hConsoleInput,
//    _Out_writes_bytes_to_(nNumberOfCharsToRead * sizeof(WCHAR), *lpNumberOfCharsRead * sizeof(WCHAR)) LPVOID lpBuffer,
//    _In_ DWORD nNumberOfCharsToRead,
//    _Out_ _Deref_out_range_(<=, nNumberOfCharsToRead) LPDWORD lpNumberOfCharsRead,
//    _In_opt_ PCONSOLE_READCONSOLE_CONTROL pInputControl
//    );
//
//#ifdef UNICODE
//#define ReadConsole  ReadConsoleW
//#else
//#define ReadConsole  ReadConsoleA
//#endif // !UNICODE

//WINBASEAPI
//_Success_(return != FALSE)
//BOOL
//WINAPI
//ReadConsoleInputA(
//    _In_ HANDLE hConsoleInput,
//    _Out_writes_to_(nLength, *lpNumberOfEventsRead) PINPUT_RECORD lpBuffer,
//    _In_ DWORD nLength,
//    _Out_ _Deref_out_range_(<=, nLength) LPDWORD lpNumberOfEventsRead
//    );
//
//WINBASEAPI
//_Success_(return != FALSE)
//BOOL
//WINAPI
//ReadConsoleInputW(
//    _In_ HANDLE hConsoleInput,
//    _Out_writes_to_(nLength, *lpNumberOfEventsRead) PINPUT_RECORD lpBuffer,
//    _In_ DWORD nLength,
//    _Out_ _Deref_out_range_(<=, nLength) LPDWORD lpNumberOfEventsRead
//    );
//
//#ifdef UNICODE
//#define ReadConsoleInput  ReadConsoleInputW
//#else
//#define ReadConsoleInput  ReadConsoleInputA
//#endif // !UNICODE


[
	entry("SetConsoleMode"),
	helpstring("Sets the input mode of a console's input buffer or the output mode of a console screen buffer.")
]
WINBASEAPI
BOOL
WINAPI
SetConsoleMode(
    _In_ HANDLE hConsoleHandle,
    _In_ DWORD dwMode
    );
//
//
//WINBASEAPI
//BOOL
//WINAPI
//WriteConsoleA(
//    _In_ HANDLE hConsoleOutput,
//    _In_reads_(nNumberOfCharsToWrite) CONST VOID * lpBuffer,
//    _In_ DWORD nNumberOfCharsToWrite,
//    _Out_opt_ LPDWORD lpNumberOfCharsWritten,
//    _Reserved_ LPVOID lpReserved
//    );
//
//WINBASEAPI
//BOOL
//WINAPI
//WriteConsoleW(
//    _In_ HANDLE hConsoleOutput,
//    _In_reads_(nNumberOfCharsToWrite) CONST VOID * lpBuffer,
//    _In_ DWORD nNumberOfCharsToWrite,
//    _Out_opt_ LPDWORD lpNumberOfCharsWritten,
//    _Reserved_ LPVOID lpReserved
//    );
//
//#ifdef UNICODE
//#define WriteConsole  WriteConsoleW
//#else
//#define WriteConsole  WriteConsoleA
//#endif // !UNICODE

}

